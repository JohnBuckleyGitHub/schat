#!/bin/sh
# $Id: schatd.init 1425 2011-01-31 20:17:59Z IMPOMEZIA $
# IMPOMEZIA Simple Chat
# Copyright (c) 2008-2011 IMPOMEZIA <schat@impomezia.com>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.
#
### BEGIN INIT INFO
# Provides:          schatd
# Required-Start:    $network $local_fs
# Required-Stop:
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: IMPOMEZIA Simple Chat Daemon
# Description:       IMPOMEZIA Simple Chat Daemon init script
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/sbin/schatd
NAME=schatd
DESC="IMPOMEZIA Simple Chat Daemon"
LOGDIR=/var/log/$NAME
PIDFILE=/var/run/schatd/$NAME.pid

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

DAEMON_OPTS=""
LOGFILE=$LOGDIR/$NAME.log
DAEMONUSER=schatd

if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

# Check that the user exists (if we set a user)
# Does the user exist?
if [ -n "$DAEMONUSER" ] ; then
    if getent passwd | grep -q "^$DAEMONUSER:"; then
        # Obtain the uid and gid
        DAEMONUID=`getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $3}'`
        DAEMONGID=`getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $4}'`
    else
        log_failure_msg "The user $DAEMONUSER, required to run $NAME does not exist."
        exit 0
    fi
fi

set -e

running_pid() {
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

start_server() {
    start-stop-daemon --start --quiet \
                      --chuid $DAEMONUSER \
                      --exec $DAEMON -- $DAEMON_OPTS
    errcode=$?
    return $errcode
}

stop_server() {
    start-stop-daemon --stop --quiet \
                      --user $DAEMONUSER \
                      --exec $DAEMON -- -terminate
    errcode=$?

    return $errcode
}

reload_server() {
    [ ! -f "$PIDFILE" ] && return 1
    pid=pidofproc $PIDFILE
    # Send a SIGHUP
    kill -1 $pid
    return $?
}

force_stop() {
    [ ! -e "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        if running ; then
            kill -9 $pid
            if running ; then
                echo "Cannot kill $NAME (pid=$pid)!"
                exit 0
            fi
        fi
    fi
    rm -f $PIDFILE
}


case "$1" in
  start)
      log_daemon_msg "Starting $DESC"
      if running ; then
          log_progress_msg "apparently already running"
          log_end_msg 0
          exit 0
      fi
      
      if start_server ; then
          log_end_msg 0
      else
          log_end_msg 1
      fi
      ;;
  stop)
      log_daemon_msg "Stopping $DESC"
      if running ; then
          errcode=0
          stop_server || errcode=$?
          log_end_msg $errcode
      else
          log_progress_msg "apparently not running"
          log_end_msg 0
          exit 0
      fi
      ;;
  force-stop)
      $0 stop
      if running; then
          log_daemon_msg "Stopping (force) $DESC"
          errcode=0
          force_stop || errcode=$?
          log_end_msg $errcode
      fi
      ;;
  restart|force-reload)
      log_daemon_msg "Restarting $DESC"
      errcode=0
      stop_server || errcode=$?
      start_server || errcode=$?
      log_end_msg $errcode
      ;;
  status)
      log_daemon_msg "Checking status of $DESC"
      if running ;  then
          log_progress_msg "running"
          log_end_msg 0
      else
          log_progress_msg "apparently not running"
          log_end_msg 1
          exit 0
      fi
      ;;
  reload)
      log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
      log_warning_msg "cannot re-read the config file (use restart)."
      ;;
  *)
      N=/etc/init.d/$NAME
      echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
      exit 1
      ;;
esac

exit 0
