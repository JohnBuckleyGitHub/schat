Introduction
============

SingleApplication uses qmake to build all its components and examples. 
qmake is part of a Qt distribution. 

qmake reads project files, that contain the options and rules how to 
build a certain project. A project file ends with the suffix "*.pro". 
Files that end with the suffix "*.pri" are included by the project 
files and contain definitions, that are common for several project files.

config.pri is read by all project files of the SingleApplication package.
So the first step is to edit config.pri to adjust it to your needs.

A) Unix Qt4
==========================

qmake
make
make install

If you have installed a shared library it's path has to be known to 
the run-time linker of your operating system. On Linux systems read
"man ldconfig" ( or google for it ). Another option is to use
the LD_LIBRARY_PATH (on some systems LIBPATH is used instead, on MacOSX
it is called DYLD_LIBRARY_PATH) environment variable.

If you only want to check the SingleApplication examples without installing 
something, you can set the LD_LIBRARY_PATH to the lib directory 
of your local build. 


B) Win32/MSVC Qt4
=====================

Please read the qmake documentation how to convert 
your *.pro files into your development environment.

F.e MSVC with nmake:
qmake singleapplication.pro
nmake

C) Win32/MinGW Qt4
==================

C1) Windows Shell

Start a Windows Shell, where Qt4 is initialized. ( F.e. with
"Programs->Qt by Trolltech ...->Qt 4.4.x Command Prompt" ).

qmake singleapplication.pro
make
make install

C2) MSYS Shell Qt >= 4.3.0

Support for the MSYS Shell has been improved in Qt 4.3.0. 
Now building SingleApplication from the MSYS Shell works exactly like in UNIX 
or in the Windows Shell - or at least it should:
because of a bug in Qt 4.3.0 you always have to do a "qmake -r".


D) MacOSX

Well, the Mac is only another Unix system. So read the instructions in A).

In the recent Qt4 releases the default target of qmake is to generate
XCode project files instead of makefiles. So you might need to do the
following:

qmake -spec macx-g++


Good luck !
