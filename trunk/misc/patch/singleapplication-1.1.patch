Index: src/3rdparty/singleapplication/singleapplication.pro
===================================================================
--- src/3rdparty/singleapplication/singleapplication.pro	(revision 927)
+++ src/3rdparty/singleapplication/singleapplication.pro	(working copy)
@@ -1,4 +1,3 @@
 TEMPLATE     = subdirs
 CONFIG       += ordered
-SUBDIRS      += src \
-             examples
+SUBDIRS      += src
Index: src/3rdparty/singleapplication/src/singleapplication.cpp
===================================================================
--- src/3rdparty/singleapplication/src/singleapplication.cpp	(revision 927)
+++ src/3rdparty/singleapplication/src/singleapplication.cpp	(working copy)
@@ -23,15 +23,14 @@
 #include <QtCore/QByteArray>
 #include <QtCore/QCoreApplication>
 #include <QtCore/QDataStream>
+#include <QtCore/QDir>
 #include <QtCore/QRegExp>
 #include <QtCore/QSharedMemory>
 #include <QtCore/QString>
 
 #include <QtNetwork/QLocalSocket>
 
-#ifdef Q_OS_WIN
-#include <qt_windows.h>
-#else
+#ifndef Q_OS_WIN
 #include <sys/types.h>
 #include <pwd.h>
 #include <unistd.h>
@@ -51,18 +50,7 @@
 		login = QLatin1String("qws");
 #endif
 #ifdef Q_OS_WIN
-		QT_WA({
-			wchar_t buffer[256];
-			DWORD bufferSize = sizeof(buffer) / sizeof(wchar_t) - 1;
-			GetUserNameW(buffer, &bufferSize);
-			login = QString::fromUtf16((ushort*)buffer);
-		},
-		{
-			char buffer[256];
-			DWORD bufferSize = sizeof(buffer) / sizeof(char) - 1;
-			GetUserNameA(buffer, &bufferSize);
-			login = QString::fromLocal8Bit(buffer);
-		});
+		login = QDir::home().dirName();
 #else
 		struct passwd* pwd = getpwuid(getuid());
 		if(pwd)
@@ -157,11 +145,7 @@
 	QString uniqueKey = makeUniqueKey(key);
 
 	if(!localServer.listen(uniqueKey))
-	{
-		qWarning("SingleApplication: Unable to listen for incoming connections on '%s': %s.",
-				 uniqueKey.toLatin1().data(), localServer.errorString().toUtf8().data());
 		return;
-	}
 
 	exec();
 }
@@ -242,11 +226,6 @@
 	else
 	{
 		isRunning = (shMem->error() == QSharedMemory::AlreadyExists);
-		if(!isRunning)
-		{
-			qWarning("SingleApplication: unable to create a shared memory segment: %s (key: %s).",
-					 shMem->errorString().toUtf8().data(), uniqueKey.toLatin1().data());
-		}
 		delete shMem;
 	}
 }
@@ -267,16 +246,10 @@
 		if(ok && message == key)
 			return true;
 
-		qWarning("SingleApplication: Expected key '%s' got '%s'.",
-				 key.toLatin1().data(), message.toLatin1().data());
 		socket->disconnectFromServer();
 		socket->waitForDisconnected(i_timeout_connect);
 	}
-	else
-	{
-		qWarning("SingleApplication: Unable to connect to the server with a key '%s'.",
-				 uniqueKey.toLatin1().data());
-	}
+
 	socket->abort();
 
 	return false;
