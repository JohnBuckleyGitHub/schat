/* $Id$
 * IMPOMEZIA Simple Chat
 * Copyright © 2008 IMPOMEZIA <schat@impomezia.com>
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include <QtGui>

#include "progresspage.h"
#include "wizardsettings.h"

/*!
 * \brief Конструктор класса ProgressPage.
 */
ProgressPage::ProgressPage(QWidget *parent)
  : QWizardPage(parent)
{
  m_settings = settings;
  setTitle(tr("Идёт создание дистрибутива"));
  setSubTitle(tr("Подождите идёт создание дистрибутива"));

  m_label = new QLabel(this);
  m_progress = new QProgressBar(this);
  m_log = new QTextEdit(this);
  m_log->setReadOnly(true);

  QVBoxLayout *mainLay = new QVBoxLayout(this);
  mainLay->addWidget(m_label);
  mainLay->addWidget(m_progress);
  mainLay->addWidget(m_log);
  mainLay->setMargin(0);
}


void ProgressPage::initializePage()
{
  qDebug() << "ProgressPage::initializePage()";
  QTimer::singleShot(0, this, SLOT(nextJob()));
}


void ProgressPage::nextJob()
{
  qDebug() << "ProgressPage::nextJob()";

  m_settings->write();

  if (!createNsi(Main))
    return;

  if (m_settings->getBool("Mirror") && m_settings->getBool("MirrorCore")) {
    if (!createNsi(Core))
      return;

    if (m_settings->getBool("MirrorQt"))
      if (!createNsi(Runtime))
        return;
  }
}


/*!
 * Создаёт NSI файл с заданными настройками.
 * Папка \b custom должна существовать.
 *
 * \param type Тип файла, который нужно создать.
 * \return     Возвращает \a true в случае успешного создания файла, иначе \a false.
 */
bool ProgressPage::createNsi(Nsi type)
{
  qDebug() << "ProgressPage::createNsi()";

  QString fileName;
  if (type == Main)
    fileName = "setup.nsi";
  else if (type == Core)
    fileName = "setup-core.nsi";
  else if (type == Runtime)
    fileName = "setup-runtime.nsi";

  QFile file(QApplication::applicationDirPath() + "/custom/" + fileName);

  if (file.open(QIODevice::WriteOnly)) {
    QTextStream stream(&file);
    stream.setCodec("CP-1251");

    stream << "# Generated by " << QApplication::applicationName() << " Customize " << QApplication::applicationVersion() << endl << endl;

    if (type == Main || type == Core) {
      stream << "!define Core" << endl
             << "!define Emoticons.Kolobok" << endl
             << "!define Emoticons.Simple" << endl
             << "!define Daemon" << endl;
    }

    if (type == Main || type == Runtime)
      stream << "!define Qt" << endl;

    if (type == Core)
      stream << "!define SCHAT_PREFIX \"core-\"" << endl;
    else if (type == Runtime)
      stream << "!define SCHAT_PREFIX \"runtime-\"" << endl;

    if (!m_settings->getString("Suffix").isEmpty())
      stream << "!define SCHAT_SUFFIX \"-" << m_settings->getString("Suffix") << '"' << endl;

    stream << "!define SCHAT_VERSION " << m_settings->getString("Version") << endl
           << "!define SCHAT_QTDIR \"..\"" << endl
           << "!define SCHAT_QT_BINDIR \"..\"" << endl
           << "!define SCHAT_BINDIR \"..\"" << endl
           << "!define SCHAT_DATADIR \"..\"" << endl
           << "!define VC90_REDIST_DIR \"..\"" << endl << endl
           << "!include \"engine\\core.nsh\"" << endl;

    m_log->append(tr("Файл <b>%1</b> успешно создан").arg(fileName));
    return true;
  }
  else {
    m_log->append(tr("Ошибка создания файла <b>%1</b> [%2]").arg(fileName).arg(file.errorString()));
    return false;
  }
}
